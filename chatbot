import { useState, useRef, useEffect } from "react";
import axios from "axios";

function Chat() {
  const [chatHistory, setChatHistory] = useState([]);
  const [question, setQuestion] = useState("");
  const [generatingAnswer, setGeneratingAnswer] = useState(false);
  const [isChatOpen, setIsChatOpen] = useState(false);  // State to control chat popup visibility

  const chatContainerRef = useRef(null);

  // Scroll to the latest message
  useEffect(() => {
    if (chatContainerRef.current) {
      chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;
    }
  }, [chatHistory, generatingAnswer]);

  const basePrompt = `you are a bot assigned the duity to assist with questions that uders will have on the platform. about the platform, you are in a platform called Lest go developerd by the team ogs as their final year project . what the project 
  does is that it serves as a platform to show places that are unexplored and not popular the uers who know such places can add it in this using the add feature about ,the add page has few questions like place name , place type and other general questions 
  the usre is supose to fill them correctly and hit the submit button the thing to keep in mind is that in the question called link the user is suppose to add the location link of the place from the google maps if you know you can provide a tutorial of how to take that 
  and like that the user can add a place to the list . Appart from this feature there is also another called campaign in this user can host the campaign or join an existing one to clean and restore a place one can join using the join button on the campaign list and one can 
  host one by clicing the host button on the campaign page and filling in the required data. base on the informations provided now answer the questiions politely friendly and in a fun way keeping the conversation short and exciting  and your name is gini  `
  async function generateAnswer(e) {
    e.preventDefault();
    if (!question.trim()) return;

    const currentQuestion = question;
    setQuestion(""); // Clear input immediately after sending
    setGeneratingAnswer(true);

    // Add user question to chat history
    setChatHistory((prev) => [...prev, { type: "user", content: currentQuestion }]);

    try {
      // Call the API
      const response = await axios({
        url: `https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=THE_API_KEY`,
        method: "post",
        data: {
          contents: [
            {
              parts: [
                {
                  text: `${basePrompt}\nQuestion: ${currentQuestion}\nResponse:`,
                },
              ],
            },
          ],
        },
      });

      const aiResponse =
        response.data.candidates[0]?.content?.parts[0]?.text ||
        "Sorry, I couldn't process that.";

      // Add AI's response to chat history
      setChatHistory((prev) => [...prev, { type: "bot", content: aiResponse }]);
    } catch (error) {
      console.error(error);
      setChatHistory((prev) => [
        ...prev,
        { type: "bot", content: "Error: Unable to process the request." },
      ]);
    }

    setGeneratingAnswer(false);
  }

  const toggleChat = () => {
    setIsChatOpen(prev => !prev); // Toggle the chat popup visibility
  };

  return (
    <>
      {/* Floating Chatbot Icon */}
      <div
        className="chatbot-icon"
        onClick={toggleChat}
      >
        <img src="src/assets/sloth.png" alt="Chat Icon" className="chat-icon-img" />
      </div>

      {/* Chat Popup (Only visible if isChatOpen is true) */}
      {isChatOpen && (
        <div className="chat-popup">
          <div className="chat-header">
            <span>gini</span>
            <button className="close-btn" onClick={toggleChat}>X</button>
          </div>
          <div
            ref={chatContainerRef}
            className="chat-content"
          >
            {chatHistory.map((chat, index) => (
              <div
                key={index}
                className={`chat-message ${chat.type === "user" ? "user" : "bot"}`}
              >
                {chat.content}
              </div>
            ))}
            {generatingAnswer && (
              <div className="chat-message bot">Typing...</div>
            )}
          </div>

          {/* Input Box */}
          <form onSubmit={generateAnswer} className="chat-form">
            <textarea
              value={question}
              onChange={(e) => setQuestion(e.target.value)}
              placeholder="Type a message..."
              className="chat-input"
              required
            />
            <button
              type="submit"
              className="send-button"
              disabled={generatingAnswer}
            >
              <img src="/send-icon.png" alt="Send" className="send-icon" />
            </button>
          </form>
        </div>
      )}

      {/* Internal CSS */}
      <style jsx>{`
        /* Chatbot icon styling */
        .chatbot-icon {
          position: fixed;
          bottom: 285px;
          right: -7px;
        
          border-radius: 50%;
          padding: 12px;
          cursor: pointer;
          z-index: 1000;
          display: flex;
          justify-content: center;
          align-items: center;
        }

        .chat-icon-img {
          width: 30px;  /* Adjust the size as needed */
          height: 30px; /* Adjust the size as needed */
        }

        /* Chat window popup styling */
        .chat-popup {
          position: fixed;
          bottom: 70px;
          right: 20px;
          width: 375px;
          height: 600px;
          background-color: white;
          border-radius: 16px;
          box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.2);
          display: flex;
          flex-direction: column;
          z-index: 9999;
        }

        .chat-header {
          background-color: #4caf50;
          color: white;
          padding: 10px;
          display: flex;
          justify-content: space-between;
          align-items: center;
        }

        .chat-content {
          flex: 1;
          overflow-y: auto;
          padding: 16px;
          display: flex;
          flex-direction: column;
          gap: 16px;
        }

        .chat-message {
          padding: 12px;
          border-radius: 16px;
          max-width: 75%;
          word-wrap: break-word;
          box-shadow: 0px 4px 6px rgba(7, 100, 22, 0.48);
        }

        .chat-message.user {
          background-color: #4caf50;
          color: white;
          align-self: flex-end;
        }

        .chat-message.bot {
          background-color: #e5e7eb;
          color: black;
          align-self: flex-start;
        }

        .chat-form {
          display: flex;
          align-items: center;
          padding: 16px;
          background-color: #f9fafb;
          box-shadow: 0px -2px 4px rgba(0, 0, 0, 0.1);
        }

        .chat-input {
          flex: 1;
          padding: 8px;
          border-radius: 8px;
          border: 1px solid #d1d5db;
          resize: none;
          outline: none;
          box-shadow: inset 0px 2px 4px rgba(0, 0, 0, 0.05);
        }

        .send-button {
          margin-left: 12px;
          padding: 8px 16px;
          
          background-color: #4caf50;
          color: white;
          border: none;
          cursor: pointer;
          box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
          transition: background-color 0.3s ease;
        }

        .send-button:disabled {
          background-color: #d1d5db;
          cursor: not-allowed;
        }

        .send-icon {
          width: 24px;
          height: 24px;
        }

        .close-btn {
          background: none;
          color: white;
          border: none;
          font-size: 18px;
          cursor: pointer;
        }

        /* Media Queries for responsiveness */
        @media (max-width: 768px) {
          .chat-popup {
            width: 100%;
            height: 450px;
            bottom: 10px;
            right: 10px;
          }

          .chat-header {
            padding: 8px;
            font-size: 14px;
          }

          .chat-message {
            max-width: 90%;
          }

          .chat-form {
            padding: 10px;
          }

          .send-button {
            padding: 6px 12px;
            font-size: 14px;
          }

          .chat-input {
            font-size: 14px;
            padding: 6px;
          }
        }

        @media (max-width: 480px) {
          .chat-popup {
            height: 400px;
            bottom: 10px;
            right: 10px;
          }

          .chat-header {
            font-size: 12px;
          }

          .chat-input {
            font-size: 12px;
          }

          .send-button {
            font-size: 12px;
            padding: 4px 10px;
          }
        }
      `}</style>
    </>
  );
}

export default Chat;
